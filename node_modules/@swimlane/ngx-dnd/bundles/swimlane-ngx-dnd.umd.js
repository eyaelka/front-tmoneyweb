(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common'), require('@swimlane/dragula')) :
    typeof define === 'function' && define.amd ? define('@swimlane/ngx-dnd', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common', '@swimlane/dragula'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.common,(global.swimlane = global.swimlane || {}, global.swimlane['ngx-dnd'] = {}), global.ng.core, global.ng.common, global.dragulaNamespace));
}(this, (function (ɵngcc0,ɵngcc1,exports, i0, common, dragulaNamespace) { 
function ContainerComponent_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "ngx-dnd-item", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var item_r3 = ctx.$implicit;
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("model", item_r3)("dropZone", ctx_r2.dropZone)("dropZones", ctx_r2.dropZones)("copy", ctx_r2.copy)("moves", ctx_r2.moves)("removeOnSpill", ctx_r2.removeOnSpill)("droppableItemClass", ctx_r2.droppableItemClass);
} }
function ContainerComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ContainerComponent_ng_container_1_ng_container_1_Template, 2, 7, "ng-container", 2);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.model);
} }
function ContainerComponent_ng_content_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!model"]);
} }
var _c0 = function (a0) { return { "gu-empty": a0 }; };
var _c1 = ["*"];
function ItemComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "ngx-dnd-container", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("model", ctx_r0.model)("template", ctx_r0.container.template)("dropZone", ctx_r0.dropZone)("dropZones", ctx_r0.dropZones)("removeOnSpill", ctx_r0.removeOnSpill)("droppableItemClass", ctx_r0.droppableItemClass)("copy", ctx_r0.copy);
} }
function ItemComponent_ng_container_2_1_ng_template_0_Template(rf, ctx) { }
function ItemComponent_ng_container_2_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ItemComponent_ng_container_2_1_ng_template_0_Template, 0, 0, "ng-template", 5);
} if (rf & 2) {
    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r4.container.template)("ngTemplateOutletContext", ctx_r4.data);
} }
function ItemComponent_ng_container_2_ng_container_2_ngx_dnd_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "ngx-dnd-container", 3);
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("model", ctx_r7.model.children)("template", ctx_r7.container.template)("dropZone", ctx_r7.dropZone)("dropZones", ctx_r7.dropZones)("removeOnSpill", ctx_r7.removeOnSpill)("droppableItemClass", ctx_r7.droppableItemClass)("copy", ctx_r7.copy);
} }
function ItemComponent_ng_container_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, ItemComponent_ng_container_2_ng_container_2_ngx_dnd_container_3_Template, 1, 7, "ngx-dnd-container", 7);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.model.label, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.model.children);
} }
function ItemComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ItemComponent_ng_container_2_1_Template, 1, 2, undefined, 4);
    ɵngcc0.ɵɵtemplate(2, ItemComponent_ng_container_2_ng_container_2_Template, 4, 2, "ng-container", 4);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.container.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.container.template);
} }
function ItemComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function ItemComponent_ng_container_4_1_ng_template_0_Template(rf, ctx) { }
function ItemComponent_ng_container_4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ItemComponent_ng_container_4_1_ng_template_0_Template, 0, 0, "ng-template", 5);
} if (rf & 2) {
    var ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r8.container.template)("ngTemplateOutletContext", ctx_r8.data);
} }
function ItemComponent_ng_container_4_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r9.model, " ");
} }
function ItemComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ItemComponent_ng_container_4_1_Template, 1, 2, undefined, 4);
    ɵngcc0.ɵɵtemplate(2, ItemComponent_ng_container_4_div_2_Template, 2, 1, "div", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.container.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r3.container.template);
} }
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    // see https://github.com/dherges/ng-packagr/issues/217
    var dragula = dragulaNamespace;
    /**
     * Central service that handles all events
     *
     * @export
     */
    var DrakeStoreService = /** @class */ (function () {
        function DrakeStoreService() {
            this.droppableMap = new WeakMap();
            this.draggableMap = new WeakMap();
            this.dragulaOptions = this.createDrakeOptions();
            this.drake = dragula([], this.dragulaOptions);
            this.registerEvents();
        }
        DrakeStoreService.prototype.register = function (droppable) {
            this.droppableMap.set(droppable.container, droppable);
            this.drake.containers.push(droppable.container);
        };
        DrakeStoreService.prototype.remove = function (droppable) {
            this.droppableMap.delete(droppable.container);
            var idx = this.drake.containers.indexOf(droppable.container);
            if (idx > -1) {
                this.drake.containers.splice(idx, 1);
            }
        };
        DrakeStoreService.prototype.registerDraggable = function (draggable) {
            this.draggableMap.set(draggable.element, draggable);
        };
        DrakeStoreService.prototype.removeDraggable = function (draggable) {
            this.draggableMap.delete(draggable.element);
        };
        DrakeStoreService.prototype.createDrakeOptions = function () {
            var _this = this;
            var accepts = function (el, target /*, source: any, sibling: any */) {
                if (el.contains(target)) {
                    return false;
                }
                var elementComponent = _this.draggableMap.get(el);
                var targetComponent = _this.droppableMap.get(target);
                if (elementComponent && targetComponent) {
                    return elementComponent.dropZones.includes(targetComponent.dropZone);
                }
                return true;
            };
            var copy = function (_, source) {
                var sourceComponent = _this.droppableMap.get(source);
                if (sourceComponent) {
                    return sourceComponent.copy;
                }
                return false;
            };
            var moves = function (el, source, handle, sibling) {
                var elementComponent = _this.draggableMap.get(el);
                if (elementComponent) {
                    return elementComponent.moves(source, handle, sibling);
                }
                return true;
            };
            var direction = function (el, target, source) {
                var targetComponent = _this.droppableMap.get(target);
                return targetComponent.direction || 'vertical';
            };
            return { accepts: accepts, copy: copy, moves: moves, revertOnSpill: true, direction: direction };
        };
        DrakeStoreService.prototype.registerEvents = function () {
            var _this = this;
            var dragElm;
            var draggedItem;
            this.drake.on('drag', function (el, source) {
                draggedItem = undefined;
                dragElm = el;
                if (!el || !source) {
                    return;
                }
                if (_this.draggableMap.has(el)) {
                    var elementComponent = _this.draggableMap.get(el);
                    draggedItem = elementComponent.model;
                    elementComponent.drag.emit({
                        type: 'drag',
                        el: el,
                        source: source,
                        value: draggedItem
                    });
                }
                if (_this.droppableMap.has(source)) {
                    var sourceComponent = _this.droppableMap.get(source);
                    _this.dragulaOptions.removeOnSpill = sourceComponent.removeOnSpill;
                    sourceComponent.drag.emit({
                        type: 'drag',
                        el: el,
                        source: source,
                        sourceComponent: sourceComponent,
                        value: draggedItem
                    });
                }
            });
            this.drake.on('drop', function (el, target, source) {
                var targetComponent = _this.droppableMap.get(target);
                if (!targetComponent) {
                    // not a target, abort
                    return;
                }
                var dropElmModel = draggedItem;
                var dropIndex = Array.prototype.indexOf.call(target.children, el);
                if (dropIndex < 0) {
                    // dropIndex is bad... cancel
                    _this.drake.cancel(true);
                    return;
                }
                var sourceComponent = _this.droppableMap.get(source);
                if (sourceComponent) {
                    var sourceModel = sourceComponent.model;
                    var targetModel = targetComponent.model;
                    var hasDragModel = !!(sourceModel && draggedItem);
                    var dragIndex = hasDragModel ? sourceModel.indexOf(draggedItem) : -1;
                    if (hasDragModel && dragIndex < 0) {
                        // dragIndex is bad... cancel
                        _this.drake.cancel(true);
                        return;
                    }
                    if (targetModel) {
                        var reorder = dragIndex > -1 && sourceModel && target === source;
                        var copy = !sourceModel || dragElm !== el;
                        if (reorder) {
                            sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
                        }
                        else {
                            if (el.parentNode === target) {
                                target.removeChild(el);
                            }
                            if (copy) {
                                dropElmModel = JSON.parse(JSON.stringify(dropElmModel));
                            }
                            else {
                                if (el.parentNode !== source) {
                                    // add element back, let angular remove it
                                    _this.drake.cancel(true);
                                }
                                sourceModel.splice(dragIndex, 1);
                            }
                            targetModel.splice(dropIndex, 0, dropElmModel);
                        }
                    }
                }
                targetComponent.drop.emit({
                    type: 'drop',
                    el: el,
                    source: source,
                    value: dropElmModel,
                    dropIndex: dropIndex
                });
            });
            this.drake.on('remove', function (el, container, source) {
                if (_this.droppableMap.has(source)) {
                    var sourceComponent = _this.droppableMap.get(source);
                    var sourceModel = sourceComponent.model;
                    var dragIndex = draggedItem && sourceModel ? sourceModel.indexOf(draggedItem) : -1;
                    if (dragIndex > -1) {
                        if (el.parentNode !== source) {
                            // add element back, let angular remove it
                            source.appendChild(el);
                        }
                        sourceModel.splice(dragIndex, 1);
                    }
                    sourceComponent.remove.emit({
                        type: 'remove',
                        el: el,
                        container: container,
                        source: source,
                        value: draggedItem
                    });
                }
            });
            this.drake.on('cancel', function (el, container, source) {
                if (_this.droppableMap.has(container)) {
                    var containerComponent = _this.droppableMap.get(container);
                    containerComponent.cancel.emit({
                        type: 'cancel',
                        el: el,
                        container: container,
                        source: source,
                        value: draggedItem
                    });
                }
            });
            this.drake.on('over', function (el, container, source) {
                if (_this.droppableMap.has(container)) {
                    var containerComponent = _this.droppableMap.get(container);
                    containerComponent.over.emit({
                        type: 'over',
                        el: el,
                        container: container,
                        source: source,
                        value: draggedItem
                    });
                }
            });
            this.drake.on('out', function (el, container, source) {
                if (_this.droppableMap.has(container)) {
                    var containerComponent = _this.droppableMap.get(container);
                    containerComponent.out.emit({
                        type: 'out',
                        el: el,
                        container: container,
                        source: source,
                        value: draggedItem
                    });
                }
            });
        };
DrakeStoreService.ɵfac = function DrakeStoreService_Factory(t) { return new (t || DrakeStoreService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DrakeStoreService, [{
        type: i0.Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
        return DrakeStoreService;
    }());
    DrakeStoreService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DrakeStoreService_Factory() { return new DrakeStoreService(); }, token: DrakeStoreService, providedIn: "root" });
    DrakeStoreService.ctorParameters = function () { return []; };

    var i = 10000;
    function getNextId() {
        return i++;
    }
    /**
     * Makes the container droppable and children draggable.
     *
     * @export
     */
    var DroppableDirective = /** @class */ (function () {
        function DroppableDirective(el, renderer, drakesService) {
            this.el = el;
            this.renderer = renderer;
            this.drakesService = drakesService;
            this.copy = false;
            this.removeOnSpill = false;
            this.direction = 'vertical';
            this.drop = new i0.EventEmitter();
            this.drag = new i0.EventEmitter();
            this.over = new i0.EventEmitter();
            this.out = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
        }
        Object.defineProperty(DroppableDirective.prototype, "container", {
            get: function () {
                return this.el.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DroppableDirective.prototype, "dropZone", {
            get: function () {
                return this._dropZone || this.ngxDroppable || this.defaultZone;
            },
            set: function (val) {
                this._dropZone = val;
            },
            enumerable: false,
            configurable: true
        });
        DroppableDirective.prototype.ngOnInit = function () {
            this.defaultZone = "@@DefaultDropZone-" + getNextId() + "@@";
            this.drakesService.register(this);
        };
        DroppableDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.over.subscribe(function () {
                _this.renderer.addClass(_this.container, 'gu-over');
            });
            this.out.subscribe(function () {
                _this.renderer.removeClass(_this.container, 'gu-over');
            });
        };
        DroppableDirective.prototype.ngOnDestroy = function () {
            this.drakesService.remove(this);
        };
DroppableDirective.ɵfac = function DroppableDirective_Factory(t) { return new (t || DroppableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DrakeStoreService)); };
DroppableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DroppableDirective, selectors: [["", "ngxDroppable", ""]], inputs: { copy: "copy", removeOnSpill: "removeOnSpill", direction: "direction", dropZone: "dropZone", model: "model", ngxDroppable: "ngxDroppable" }, outputs: { drop: "drop", drag: "drag", over: "over", out: "out", remove: "remove", cancel: "cancel" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DroppableDirective, [{
        type: i0.Directive,
        args: [{ selector: '[ngxDroppable]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: DrakeStoreService }]; }, { copy: [{
            type: i0.Input
        }], removeOnSpill: [{
            type: i0.Input
        }], direction: [{
            type: i0.Input
        }], drop: [{
            type: i0.Output
        }], drag: [{
            type: i0.Output
        }], over: [{
            type: i0.Output
        }], out: [{
            type: i0.Output
        }], remove: [{
            type: i0.Output
        }], cancel: [{
            type: i0.Output
        }], dropZone: [{
            type: i0.Input
        }], model: [{
            type: i0.Input
        }], ngxDroppable: [{
            type: i0.Input
        }] }); })();
        return DroppableDirective;
    }());
    DroppableDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: DrakeStoreService }
    ]; };
    DroppableDirective.propDecorators = {
        model: [{ type: i0.Input }],
        copy: [{ type: i0.Input }],
        removeOnSpill: [{ type: i0.Input }],
        ngxDroppable: [{ type: i0.Input }],
        direction: [{ type: i0.Input }],
        drop: [{ type: i0.Output }],
        drag: [{ type: i0.Output }],
        over: [{ type: i0.Output }],
        out: [{ type: i0.Output }],
        remove: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }],
        dropZone: [{ type: i0.Input }]
    };

    /**
     * Adds properties and events to draggable elements
     *
     * @export
     */
    var DraggableDirective = /** @class */ (function () {
        function DraggableDirective(el, drakesService, droppableDirective) {
            this.el = el;
            this.drakesService = drakesService;
            this.droppableDirective = droppableDirective;
            this._moves = true;
            /*
            ContentChildren doesn't get children created with NgTemplateOutlet
            See https://github.com/angular/angular/issues/14842
            Implemented via updateElements method
          
            @ContentChildren(DragHandleDirective, {descendants: true})
            handlesList: QueryList<DragHandleDirective>; */
            this.handles = [];
            this.drag = new i0.EventEmitter();
            this.dragDelay = 200; // milliseconds
            this.dragDelayed = true;
        }
        Object.defineProperty(DraggableDirective.prototype, "dropZones", {
            get: function () {
                return this._dropZones || this.ngxDraggable || this._parentDropzones;
            },
            set: function (val) {
                this._dropZones = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DraggableDirective.prototype, "hasHandle", {
            get: function () {
                return !!this.handles.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DraggableDirective.prototype, "element", {
            get: function () {
                return this.el.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        // From: https://github.com/bevacqua/dragula/issues/289#issuecomment-277143172
        DraggableDirective.prototype.onMove = function (e) {
            if (!this._moves || this.dragDelayed) {
                e.stopPropagation();
                clearTimeout(this.touchTimeout);
            }
        };
        DraggableDirective.prototype.onDown = function () {
            var _this = this;
            if (this._moves) {
                this.touchTimeout = setTimeout(function () {
                    _this.dragDelayed = false;
                }, this.dragDelay);
            }
        };
        DraggableDirective.prototype.onUp = function () {
            if (this._moves) {
                clearTimeout(this.touchTimeout);
                this.dragDelayed = true;
            }
        };
        DraggableDirective.prototype.ngOnInit = function () {
            this.update();
        };
        DraggableDirective.prototype.update = function () {
            this._parentDropzones = [this.droppableDirective.dropZone];
            this.drakesService.registerDraggable(this);
            this.updateElements();
        };
        DraggableDirective.prototype.ngOnDestroy = function () {
            this.drakesService.removeDraggable(this);
        };
        DraggableDirective.prototype.updateElements = function () {
            var nativeElement = this.el.nativeElement;
            var handles = nativeElement.querySelectorAll('[ngxdraghandle]');
            this.handles = Array.from(handles).filter(function (h) { return findFirstDraggableParent(h) === nativeElement; });
            function findFirstDraggableParent(c) {
                while (c.parentNode) {
                    c = c.parentNode;
                    if (c.hasAttribute && c.hasAttribute('ngxdraggable')) {
                        return c;
                    }
                }
            }
        };
        DraggableDirective.prototype.canMove = function (source, handle, sibling) {
            if (typeof this._moves === 'boolean')
                return this._moves;
            if (typeof this._moves === 'function')
                return this._moves(this.model, source, handle, sibling);
            return true;
        };
        DraggableDirective.prototype.moves = function (source, handle, sibling) {
            if (!this.canMove(source, handle, sibling))
                return false;
            return this.hasHandle ? this.handles.some(function (h) { return handelFor(handle, h); }) : true;
            function handelFor(c, p) {
                if (c === p)
                    return true;
                while ((c = c.parentNode) && c !== p)
                    ; // tslint:disable-line
                return !!c;
            }
        };
        DraggableDirective.prototype.ngDoCheck = function () {
            this.updateElements();
        };
DraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DrakeStoreService), ɵngcc0.ɵɵdirectiveInject(DroppableDirective)); };
DraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DraggableDirective, selectors: [["", "ngxDraggable", ""]], hostBindings: function DraggableDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("touchmove", function DraggableDirective_touchmove_HostBindingHandler($event) { return ctx.onMove($event); })("touchstart", function DraggableDirective_touchstart_HostBindingHandler() { return ctx.onDown(); })("touchend", function DraggableDirective_touchend_HostBindingHandler() { return ctx.onUp(); });
    } }, inputs: { _moves: ["moves", "_moves"], dropZones: "dropZones", ngxDraggable: "ngxDraggable", model: "model" }, outputs: { drag: "drag" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableDirective, [{
        type: i0.Directive,
        args: [{ selector: '[ngxDraggable]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DrakeStoreService }, { type: DroppableDirective }]; }, { _moves: [{
            type: i0.Input,
            args: ['moves']
        }], drag: [{
            type: i0.Output
        }], dropZones: [{
            type: i0.Input
        }], onMove: [{
            type: i0.HostListener,
            args: ['touchmove', ['$event']]
        }], onDown: [{
            type: i0.HostListener,
            args: ['touchstart']
        }], onUp: [{
            type: i0.HostListener,
            args: ['touchend']
        }], ngxDraggable: [{
            type: i0.Input
        }], model: [{
            type: i0.Input
        }] }); })();
        return DraggableDirective;
    }());
    DraggableDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: DrakeStoreService },
        { type: DroppableDirective }
    ]; };
    DraggableDirective.propDecorators = {
        ngxDraggable: [{ type: i0.Input }],
        model: [{ type: i0.Input }],
        dropZones: [{ type: i0.Input }],
        _moves: [{ type: i0.Input, args: ['moves',] }],
        drag: [{ type: i0.Output }],
        onMove: [{ type: i0.HostListener, args: ['touchmove', ['$event'],] }],
        onDown: [{ type: i0.HostListener, args: ['touchstart',] }],
        onUp: [{ type: i0.HostListener, args: ['touchend',] }]
    };

    /**
     * Adds properties and events to drag handle elements
     *
     * @export
     */
    var DragHandleDirective = /** @class */ (function () {
        function DragHandleDirective() {
        }
DragHandleDirective.ɵfac = function DragHandleDirective_Factory(t) { return new (t || DragHandleDirective)(); };
DragHandleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DragHandleDirective, selectors: [["", "ngxDragHandle", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragHandleDirective, [{
        type: i0.Directive,
        args: [{ selector: '[ngxDragHandle]' }]
    }], function () { return []; }, null); })();
        return DragHandleDirective;
    }());

    var i$1 = 0;
    function getNextId$1() {
        return i$1++;
    }
    /**
     * Component that allows nested ngxDroppable and ngxDraggables
     *
     * @export
     */
    var ContainerComponent = /** @class */ (function () {
        function ContainerComponent() {
            this.copy = false;
            this.removeOnSpill = false;
            this.dropZone = "@@DefaultDropZone-" + getNextId$1() + "@@";
            this.drop = new i0.EventEmitter();
            this.drag = new i0.EventEmitter();
            this.over = new i0.EventEmitter();
            this.out = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
        }
        Object.defineProperty(ContainerComponent.prototype, "dropZones", {
            get: function () {
                return this._dropZones || this._defaultZones;
            },
            set: function (val) {
                this._dropZones = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContainerComponent.prototype, "templateInput", {
            // @Input() classes: any = {};
            // @Input() dragulaOptions: any;
            set: function (template) {
                this.template = template;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContainerComponent.prototype, "templateChild", {
            set: function (template) {
                this.template = template;
            },
            enumerable: false,
            configurable: true
        });
        ContainerComponent.prototype.ngOnInit = function () {
            this._defaultZones = [this.dropZone];
        };
        ContainerComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.droppable.drag.subscribe(function (v) { return _this.drag.emit(v); });
            this.droppable.drop.subscribe(function (v) { return _this.drop.emit(v); });
            this.droppable.over.subscribe(function (v) { return _this.over.emit(v); });
            this.droppable.out.subscribe(function (v) { return _this.out.emit(v); });
            this.droppable.remove.subscribe(function (v) { return _this.remove.emit(v); });
            this.droppable.cancel.subscribe(function (v) { return _this.cancel.emit(v); });
        };
ContainerComponent.ɵfac = function ContainerComponent_Factory(t) { return new (t || ContainerComponent)(); };
ContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ContainerComponent, selectors: [["ngx-dnd-container"]], contentQueries: function ContainerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, i0.TemplateRef, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateChild = _t.first);
    } }, viewQuery: function ContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(DroppableDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.droppable = _t.first);
    } }, inputs: { copy: "copy", removeOnSpill: "removeOnSpill", dropZone: "dropZone", dropZones: "dropZones", templateInput: ["template", "templateInput"], model: "model", droppableItemClass: "droppableItemClass", moves: "moves" }, outputs: { drop: "drop", drag: "drag", over: "over", out: "out", remove: "remove", cancel: "cancel" }, ngContentSelectors: _c1, decls: 3, vars: 9, consts: [["ngxDroppable", "", 1, "ngx-dnd-container", 3, "dropZone", "model", "copy", "ngClass", "removeOnSpill"], [4, "ngIf"], [4, "ngFor", "ngForOf"], ["ngxDraggable", "", 3, "model", "dropZone", "dropZones", "copy", "moves", "removeOnSpill", "droppableItemClass"]], template: function ContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ContainerComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, ContainerComponent_ng_content_2_Template, 1, 0, "ng-content", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("dropZone", ctx.dropZone)("model", ctx.model)("copy", ctx.copy)("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c0, !(ctx.model == null ? null : ctx.model.length)))("removeOnSpill", ctx.removeOnSpill);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.model);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.model);
    } }, directives: function () { return [DroppableDirective, ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf, ItemComponent, DraggableDirective]; }, styles: [".ngx-dnd-container{background-color:hsla(0,0%,100%,.2);border:2px solid red;margin:10px;padding:10px}.ngx-dnd-container.gu-empty{border:2px dotted red}.ngx-dnd-container:nth-child(odd){background-color:rgba(0,0,0,.2)}.ngx-dnd-container .ex-moved{background-color:#e74c3c}.ngx-dnd-container .ex-over{background-color:hsla(0,0%,100%,.3)}.ngx-dnd-container .handle{background-color:rgba(0,0,0,.4);cursor:move;margin-right:5px;padding:0 5px}.no-select{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.clearfix:after{clear:both;content:\" \";display:block;height:0}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContainerComponent, [{
        type: i0.Component,
        args: [{
                selector: 'ngx-dnd-container',
                template: "<div\n  ngxDroppable\n  [dropZone]=\"dropZone\"\n  [model]=\"model\"\n  [copy]=\"copy\"\n  [ngClass]=\"{ 'gu-empty': !model?.length }\"\n  [removeOnSpill]=\"removeOnSpill\"\n  class='ngx-dnd-container'>\n  <ng-container *ngIf=\"model\">\n    <ng-container *ngFor=\"let item of model\">\n      <ngx-dnd-item\n        ngxDraggable\n        [model]=\"item\"\n        [dropZone]=\"dropZone\"\n        [dropZones]=\"dropZones\"\n        [copy]=\"copy\"\n        [moves]=\"moves\"\n        [removeOnSpill]=\"removeOnSpill\"\n        [droppableItemClass]=\"droppableItemClass\">\n      </ngx-dnd-item>\n    </ng-container>\n  </ng-container>\n  <ng-content *ngIf=\"!model\"></ng-content>\n</div>\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".ngx-dnd-container{background-color:hsla(0,0%,100%,.2);border:2px solid red;margin:10px;padding:10px}.ngx-dnd-container.gu-empty{border:2px dotted red}.ngx-dnd-container:nth-child(odd){background-color:rgba(0,0,0,.2)}.ngx-dnd-container .ex-moved{background-color:#e74c3c}.ngx-dnd-container .ex-over{background-color:hsla(0,0%,100%,.3)}.ngx-dnd-container .handle{background-color:rgba(0,0,0,.4);cursor:move;margin-right:5px;padding:0 5px}.no-select{-moz-user-select:none;-ms-user-select:none;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}.clearfix:after{clear:both;content:\" \";display:block;height:0}"]
            }]
    }], function () { return []; }, { copy: [{
            type: i0.Input
        }], removeOnSpill: [{
            type: i0.Input
        }], dropZone: [{
            type: i0.Input
        }], drop: [{
            type: i0.Output
        }], drag: [{
            type: i0.Output
        }], over: [{
            type: i0.Output
        }], out: [{
            type: i0.Output
        }], remove: [{
            type: i0.Output
        }], cancel: [{
            type: i0.Output
        }], dropZones: [{
            type: i0.Input
        }], templateInput: [{
            type: i0.Input,
            args: ['template']
        }], templateChild: [{
            type: i0.ContentChild,
            args: [i0.TemplateRef, { static: true }]
        }], model: [{
            type: i0.Input
        }], droppableItemClass: [{
            type: i0.Input
        }], moves: [{
            type: i0.Input
        }], droppable: [{
            type: i0.ViewChild,
            args: [DroppableDirective, { static: true }]
        }] }); })();
        return ContainerComponent;
    }());
    ContainerComponent.propDecorators = {
        model: [{ type: i0.Input }],
        copy: [{ type: i0.Input }],
        removeOnSpill: [{ type: i0.Input }],
        droppableItemClass: [{ type: i0.Input }],
        dropZone: [{ type: i0.Input }],
        dropZones: [{ type: i0.Input }],
        moves: [{ type: i0.Input }],
        templateInput: [{ type: i0.Input, args: ['template',] }],
        templateChild: [{ type: i0.ContentChild, args: [i0.TemplateRef, { static: true },] }],
        droppable: [{ type: i0.ViewChild, args: [DroppableDirective, { static: true },] }],
        drop: [{ type: i0.Output }],
        drag: [{ type: i0.Output }],
        over: [{ type: i0.Output }],
        out: [{ type: i0.Output }],
        remove: [{ type: i0.Output }],
        cancel: [{ type: i0.Output }]
    };

    /**
     * Component that allows nested ngxDroppable and ngxDraggables
     * Should only be use inside a ngx-dnd-container
     * Outside a ngx-dnd-container use ngxDroppable
     *
     * @export
     */
    var ItemComponent = /** @class */ (function () {
        function ItemComponent(container, draggableDirective) {
            this.container = container;
            this.draggableDirective = draggableDirective;
            this._copy = false;
            this._removeOnSpill = false;
        }
        Object.defineProperty(ItemComponent.prototype, "dropZone", {
            get: function () {
                return this._dropZone || this.container.dropZone;
            },
            set: function (val) {
                this._dropZone = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "dropZones", {
            get: function () {
                return this._dropZones || this.container.dropZones;
            },
            set: function (val) {
                this._dropZones = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "droppableItemClass", {
            get: function () {
                return this._droppableItemClass || this.container.droppableItemClass;
            },
            set: function (val) {
                this._droppableItemClass = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "removeOnSpill", {
            get: function () {
                return typeof this._removeOnSpill === 'boolean' ? this._removeOnSpill : this.container.removeOnSpill;
            },
            set: function (val) {
                this._removeOnSpill = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "copy", {
            get: function () {
                return typeof this._copy === 'boolean' ? this._copy : this.container.copy;
            },
            set: function (val) {
                this._copy = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "hasHandle", {
            get: function () {
                return this.draggableDirective.hasHandle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "moveDisabled", {
            get: function () {
                return !this.draggableDirective.canMove();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "classString", {
            get: function () {
                var itemClass = typeof this.droppableItemClass === 'function' ? this.droppableItemClass(this.model) : this.droppableItemClass;
                var classes = ['ngx-dnd-item', itemClass || ''];
                if (this.moveDisabled) {
                    classes.push('move-disabled');
                }
                if (this.hasHandle) {
                    classes.push('has-handle');
                }
                return classes.join(' ');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "type", {
            get: function () {
                if (Array.isArray(this.model)) {
                    return 'array';
                }
                return typeof this.model;
            },
            enumerable: false,
            configurable: true
        });
        ItemComponent.prototype.ngOnInit = function () {
            this.data = {
                model: this.model,
                type: this.type,
                dropZone: this.dropZone,
                template: this.container.template
            };
        };
ItemComponent.ɵfac = function ItemComponent_Factory(t) { return new (t || ItemComponent)(ɵngcc0.ɵɵdirectiveInject(ContainerComponent), ɵngcc0.ɵɵdirectiveInject(DraggableDirective)); };
ItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ItemComponent, selectors: [["ngx-dnd-item"]], hostVars: 2, hostBindings: function ItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.classString);
    } }, inputs: { dropZone: "dropZone", dropZones: "dropZones", droppableItemClass: "droppableItemClass", removeOnSpill: "removeOnSpill", copy: "copy", model: "model" }, decls: 5, vars: 4, consts: [[3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], [3, "model", "template", "dropZone", "dropZones", "removeOnSpill", "droppableItemClass", "copy"], [4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ngx-dnd-content"], [3, "model", "template", "dropZone", "dropZones", "removeOnSpill", "droppableItemClass", "copy", 4, "ngIf"], ["class", "ngx-dnd-content", 4, "ngIf"]], template: function ItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, ItemComponent_ng_container_1_Template, 2, 7, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, ItemComponent_ng_container_2_Template, 3, 2, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(3, ItemComponent_ng_container_3_Template, 1, 0, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(4, ItemComponent_ng_container_4_Template, 3, 2, "ng-container", 2);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.type);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "array");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "object");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "undefined");
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, ɵngcc1.NgSwitchDefault, ContainerComponent, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], styles: [".ngx-dnd-box,.ngx-dnd-item{background-color:rgba(0,0,0,.2);border:1px solid #add8e6;display:block;margin:10px;padding:10px;transition:opacity .4s ease-in-out}.ngx-dnd-box.has-handle [ngxdraghandle],.ngx-dnd-box.has-handle [ngxDragHandle],.ngx-dnd-box:not(.has-handle):not(.move-disabled),.ngx-dnd-item.has-handle [ngxdraghandle],.ngx-dnd-item.has-handle [ngxDragHandle],.ngx-dnd-item:not(.has-handle):not(.move-disabled){cursor:move;cursor:grab;cursor:-webkit-grab}.ngx-dnd-box .ngx-dnd-content,.ngx-dnd-item .ngx-dnd-content{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;user-select:none}.ngx-dnd-box:hover,.ngx-dnd-item:hover{border:1px solid #00f}.ngx-dnd-box{float:left;height:40px;line-height:20px;text-align:center;width:40px}.gu-mirror{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";filter:alpha(opacity=80);margin:0!important;opacity:.8;position:fixed!important;z-index:9999!important}.gu-hide{display:none!important}.gu-unselectable{-moz-user-select:none!important;-ms-user-select:none!important;-webkit-user-select:none!important;user-select:none!important}.gu-transit{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";filter:alpha(opacity=20);opacity:.2}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ItemComponent, [{
        type: i0.Component,
        args: [{
                selector: 'ngx-dnd-item',
                template: "<ng-container [ngSwitch]=\"type\">\n\n  <ng-container *ngSwitchCase=\"'array'\">\n    <ngx-dnd-container\n      [model]=\"model\"\n      [template]=\"container.template\"\n      [dropZone]=\"dropZone\"\n      [dropZones]=\"dropZones\"\n      [removeOnSpill]=\"removeOnSpill\"\n      [droppableItemClass]=\"droppableItemClass\"\n      [copy]=\"copy\">\n    </ngx-dnd-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'object'\">\n    <ng-template\n      *ngIf=\"container.template\"\n      [ngTemplateOutlet]=\"container.template\"\n      [ngTemplateOutletContext]=\"data\">\n    </ng-template>\n    <ng-container *ngIf=\"!container.template\">\n      <div\n        class=\"ngx-dnd-content\">\n        {{model.label}}\n      </div>\n      <ngx-dnd-container\n        *ngIf=\"model.children\"\n        [model]=\"model.children\"\n        [template]=\"container.template\"\n        [dropZone]=\"dropZone\"\n        [dropZones]=\"dropZones\"\n        [removeOnSpill]=\"removeOnSpill\"\n        [droppableItemClass]=\"droppableItemClass\"\n        [copy]=\"copy\">\n      </ngx-dnd-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'undefined'\">\n  </ng-container>\n\n  <ng-container *ngSwitchDefault>\n    <ng-template\n      *ngIf=\"container.template\"\n      [ngTemplateOutlet]=\"container.template\"\n      [ngTemplateOutletContext]=\"data\">\n    </ng-template>\n    <div\n      *ngIf=\"!container.template\"\n      class=\"ngx-dnd-content\">\n      {{model}}\n    </div>\n  </ng-container>\n\n</ng-container>\n\n\n\n\n\n\n\n",
                encapsulation: i0.ViewEncapsulation.None,
                styles: [".ngx-dnd-box,.ngx-dnd-item{background-color:rgba(0,0,0,.2);border:1px solid #add8e6;display:block;margin:10px;padding:10px;transition:opacity .4s ease-in-out}.ngx-dnd-box.has-handle [ngxdraghandle],.ngx-dnd-box.has-handle [ngxDragHandle],.ngx-dnd-box:not(.has-handle):not(.move-disabled),.ngx-dnd-item.has-handle [ngxdraghandle],.ngx-dnd-item.has-handle [ngxDragHandle],.ngx-dnd-item:not(.has-handle):not(.move-disabled){cursor:move;cursor:grab;cursor:-webkit-grab}.ngx-dnd-box .ngx-dnd-content,.ngx-dnd-item .ngx-dnd-content{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;user-select:none}.ngx-dnd-box:hover,.ngx-dnd-item:hover{border:1px solid #00f}.ngx-dnd-box{float:left;height:40px;line-height:20px;text-align:center;width:40px}.gu-mirror{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";filter:alpha(opacity=80);margin:0!important;opacity:.8;position:fixed!important;z-index:9999!important}.gu-hide{display:none!important}.gu-unselectable{-moz-user-select:none!important;-ms-user-select:none!important;-webkit-user-select:none!important;user-select:none!important}.gu-transit{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";filter:alpha(opacity=20);opacity:.2}"]
            }]
    }], function () { return [{ type: ContainerComponent }, { type: DraggableDirective }]; }, { dropZone: [{
            type: i0.Input
        }], dropZones: [{
            type: i0.Input
        }], droppableItemClass: [{
            type: i0.Input
        }], removeOnSpill: [{
            type: i0.Input
        }], copy: [{
            type: i0.Input
        }], classString: [{
            type: i0.HostBinding,
            args: ['class']
        }], model: [{
            type: i0.Input
        }] }); })();
        return ItemComponent;
    }());
    ItemComponent.ctorParameters = function () { return [
        { type: ContainerComponent },
        { type: DraggableDirective }
    ]; };
    ItemComponent.propDecorators = {
        model: [{ type: i0.Input }],
        dropZone: [{ type: i0.Input }],
        dropZones: [{ type: i0.Input }],
        droppableItemClass: [{ type: i0.Input }],
        removeOnSpill: [{ type: i0.Input }],
        copy: [{ type: i0.Input }],
        classString: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var components = [ContainerComponent, ItemComponent];
    var directives = [DraggableDirective, DroppableDirective, DragHandleDirective];
    var NgxDnDModule = /** @class */ (function () {
        function NgxDnDModule() {
        }
        NgxDnDModule.forRoot = function () {
            return {
                ngModule: NgxDnDModule,
                providers: [DrakeStoreService]
            };
        };
NgxDnDModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxDnDModule });
NgxDnDModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxDnDModule_Factory(t) { return new (t || NgxDnDModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDnDModule, { declarations: [ContainerComponent, ItemComponent, DraggableDirective, DroppableDirective, DragHandleDirective], imports: [ɵngcc1.CommonModule], exports: [ContainerComponent, ItemComponent, DraggableDirective, DroppableDirective, DragHandleDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxDnDModule, [{
        type: i0.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: __spread(components, directives),
                exports: __spread(components, directives)
            }]
    }], function () { return []; }, null); })();
        return NgxDnDModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ContainerComponent = ContainerComponent;
    exports.DragHandleDirective = DragHandleDirective;
    exports.DraggableDirective = DraggableDirective;
    exports.DrakeStoreService = DrakeStoreService;
    exports.DroppableDirective = DroppableDirective;
    exports.ItemComponent = ItemComponent;
    exports.NgxDnDModule = NgxDnDModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=swimlane-ngx-dnd.umd.js.map