import { OnInit, AfterViewInit, TemplateRef, EventEmitter } from '@angular/core';
/**
 * Component that allows nested ngxDroppable and ngxDraggables
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';
export declare class ContainerComponent implements OnInit, AfterViewInit {
    model: any;
    copy: boolean;
    removeOnSpill: boolean;
    droppableItemClass: string | ((o: any) => any);
    dropZone: string;
    get dropZones(): string[];
    set dropZones(val: string[]);
    moves: (model: any, source: any, handle: any, sibling: any) => boolean;
    set templateInput(template: TemplateRef<any>);
    set templateChild(template: TemplateRef<any>);
    template: TemplateRef<any>;
    droppable: any;
    drop: EventEmitter<any>;
    drag: EventEmitter<any>;
    over: EventEmitter<any>;
    out: EventEmitter<any>;
    remove: EventEmitter<any>;
    cancel: EventEmitter<any>;
    _dropZones: string[];
    _defaultZones: string[];
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContainerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ContainerComponent, "ngx-dnd-container", never, { "copy": "copy"; "removeOnSpill": "removeOnSpill"; "dropZone": "dropZone"; "dropZones": "dropZones"; "templateInput": "template"; "model": "model"; "droppableItemClass": "droppableItemClass"; "moves": "moves"; }, { "drop": "drop"; "drag": "drag"; "over": "over"; "out": "out"; "remove": "remove"; "cancel": "cancel"; }, ["templateChild"], ["*"]>;
}

//# sourceMappingURL=container.component.d.ts.map