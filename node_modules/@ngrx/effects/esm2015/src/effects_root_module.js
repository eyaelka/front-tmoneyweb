/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Inject, Optional } from '@angular/core';
import { createAction, Store, StoreRootModule, StoreFeatureModule, } from '@ngrx/store';
import { EffectsRunner } from './effects_runner';
import { EffectSources } from './effect_sources';
import { ROOT_EFFECTS, _ROOT_EFFECTS_GUARD } from './tokens';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './effect_sources';
import * as ɵngcc2 from './effects_runner';
import * as ɵngcc3 from '@ngrx/store';
export const ROOT_EFFECTS_INIT = '@ngrx/effects/init';
/** @type {?} */
export const rootEffectsInit = createAction(ROOT_EFFECTS_INIT);
export class EffectsRootModule {
    /**
     * @param {?} sources
     * @param {?} runner
     * @param {?} store
     * @param {?} rootEffects
     * @param {?} storeRootModule
     * @param {?} storeFeatureModule
     * @param {?} guard
     */
    constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {
        this.sources = sources;
        runner.start();
        rootEffects.forEach((/**
         * @param {?} effectSourceInstance
         * @return {?}
         */
        effectSourceInstance => sources.addEffects(effectSourceInstance)));
        store.dispatch({ type: ROOT_EFFECTS_INIT });
    }
    /**
     * @param {?} effectSourceInstance
     * @return {?}
     */
    addEffects(effectSourceInstance) {
        this.sources.addEffects(effectSourceInstance);
    }
}
EffectsRootModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: EffectsRootModule });
EffectsRootModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function EffectsRootModule_Factory(t) { return new (t || EffectsRootModule)(ɵngcc0.ɵɵinject(ɵngcc1.EffectSources), ɵngcc0.ɵɵinject(ɵngcc2.EffectsRunner), ɵngcc0.ɵɵinject(ɵngcc3.Store), ɵngcc0.ɵɵinject(ROOT_EFFECTS), ɵngcc0.ɵɵinject(ɵngcc3.StoreRootModule, 8), ɵngcc0.ɵɵinject(ɵngcc3.StoreFeatureModule, 8), ɵngcc0.ɵɵinject(_ROOT_EFFECTS_GUARD, 8)); } });
/** @nocollapse */
EffectsRootModule.ctorParameters = () => [
    { type: EffectSources },
    { type: EffectsRunner },
    { type: Store },
    { type: Array, decorators: [{ type: Inject, args: [ROOT_EFFECTS,] }] },
    { type: StoreRootModule, decorators: [{ type: Optional }] },
    { type: StoreFeatureModule, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_ROOT_EFFECTS_GUARD,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EffectsRootModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: ɵngcc1.EffectSources }, { type: ɵngcc2.EffectsRunner }, { type: ɵngcc3.Store }, { type: Array, decorators: [{
                type: Inject,
                args: [ROOT_EFFECTS]
            }] }, { type: ɵngcc3.StoreRootModule, decorators: [{
                type: Optional
            }] }, { type: ɵngcc3.StoreFeatureModule, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [_ROOT_EFFECTS_GUARD]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    EffectsRootModule.prototype.sources;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0c19yb290X21vZHVsZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9lZmZlY3RzL3NyYy9lZmZlY3RzX3Jvb3RfbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUNMLFlBQVksRUFFWixLQUFLLEVBQ0wsZUFBZSxFQUNmLGtCQUFrQixHQUNuQixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDN0Q7Ozs7O0FBQ0EsTUFBTSxPQUFPLGlCQUFpQixHQUFHLG9CQUFvQjtBQUNyRDtBQUFBLE1BQU0sT0FBTyxlQUFlLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixDQUFDO0FBRzlELE1BQU0sT0FBTyxpQkFBaUI7QUFDOUI7QUFBUTtBQUNXO0FBQ1g7QUFDSDtBQUNPO0FBQ1o7QUFBcUM7QUFDMUI7QUFBUSxJQU5qQixZQUNVLE9BQXNCLEVBQzlCLE1BQXFCLEVBQ3JCLEtBQWlCLEVBQ0ssV0FBa0IsRUFDNUIsZUFBZ0MsRUFDaEMsa0JBQXNDLEVBR2xELEtBQVU7QUFDWCxRQVRTLFlBQU8sR0FBUCxPQUFPLENBQWU7QUFBQyxRQVUvQixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbkIsUUFDSSxXQUFXLENBQUMsT0FBTztBQUFNO0FBQ0w7QUFDeEI7QUFFSSxRQUpvQixvQkFBb0IsQ0FBQyxFQUFFLENBQ3pDLE9BQU8sQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsRUFDekMsQ0FBQztBQUNOLFFBQ0ksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7QUFDaEQsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNIO0FBQW1CO0FBQVEsSUFEN0IsVUFBVSxDQUFDLG9CQUF5QjtBQUN0QyxRQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDbEQsSUFBRSxDQUFDO0FBQ0g7NkNBekJDLFFBQVEsU0FBQyxFQUFFOzhaQUNQO0FBQUM7QUFBbUI7QUFFTCxZQVRYLGFBQWE7QUFBSSxZQURqQixhQUFhO0FBQUksWUFKeEIsS0FBSztBQUNMLHdDQWdCRyxNQUFNLFNBQUMsWUFBWTtBQUFTLFlBaEIvQixlQUFlLHVCQWlCWixRQUFRO0FBQU8sWUFoQmxCLGtCQUFrQix1QkFpQmYsUUFBUTtBQUFPLDRDQUNmLFFBQVEsWUFDUixNQUFNLFNBQUMsbUJBQW1CO0FBQ3pCOzs7Ozs7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUM7QUFFUjtBQUFRO0FBRUo7QUFBZ0I7QUFBUSxJQVp6QixvQ0FBOEI7QUFBQztBQUNsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBjcmVhdGVBY3Rpb24sXG4gIFN0b3JlTW9kdWxlLFxuICBTdG9yZSxcbiAgU3RvcmVSb290TW9kdWxlLFxuICBTdG9yZUZlYXR1cmVNb2R1bGUsXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEVmZmVjdHNSdW5uZXIgfSBmcm9tICcuL2VmZmVjdHNfcnVubmVyJztcbmltcG9ydCB7IEVmZmVjdFNvdXJjZXMgfSBmcm9tICcuL2VmZmVjdF9zb3VyY2VzJztcbmltcG9ydCB7IFJPT1RfRUZGRUNUUywgX1JPT1RfRUZGRUNUU19HVUFSRCB9IGZyb20gJy4vdG9rZW5zJztcblxuZXhwb3J0IGNvbnN0IFJPT1RfRUZGRUNUU19JTklUID0gJ0BuZ3J4L2VmZmVjdHMvaW5pdCc7XG5leHBvcnQgY29uc3Qgcm9vdEVmZmVjdHNJbml0ID0gY3JlYXRlQWN0aW9uKFJPT1RfRUZGRUNUU19JTklUKTtcblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIEVmZmVjdHNSb290TW9kdWxlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzb3VyY2VzOiBFZmZlY3RTb3VyY2VzLFxuICAgIHJ1bm5lcjogRWZmZWN0c1J1bm5lcixcbiAgICBzdG9yZTogU3RvcmU8YW55PixcbiAgICBASW5qZWN0KFJPT1RfRUZGRUNUUykgcm9vdEVmZmVjdHM6IGFueVtdLFxuICAgIEBPcHRpb25hbCgpIHN0b3JlUm9vdE1vZHVsZTogU3RvcmVSb290TW9kdWxlLFxuICAgIEBPcHRpb25hbCgpIHN0b3JlRmVhdHVyZU1vZHVsZTogU3RvcmVGZWF0dXJlTW9kdWxlLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChfUk9PVF9FRkZFQ1RTX0dVQVJEKVxuICAgIGd1YXJkOiBhbnlcbiAgKSB7XG4gICAgcnVubmVyLnN0YXJ0KCk7XG5cbiAgICByb290RWZmZWN0cy5mb3JFYWNoKGVmZmVjdFNvdXJjZUluc3RhbmNlID0+XG4gICAgICBzb3VyY2VzLmFkZEVmZmVjdHMoZWZmZWN0U291cmNlSW5zdGFuY2UpXG4gICAgKTtcblxuICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogUk9PVF9FRkZFQ1RTX0lOSVQgfSk7XG4gIH1cblxuICBhZGRFZmZlY3RzKGVmZmVjdFNvdXJjZUluc3RhbmNlOiBhbnkpIHtcbiAgICB0aGlzLnNvdXJjZXMuYWRkRWZmZWN0cyhlZmZlY3RTb3VyY2VJbnN0YW5jZSk7XG4gIH1cbn1cbiJdfQ==